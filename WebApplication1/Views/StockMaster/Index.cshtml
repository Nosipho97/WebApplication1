@model Stock.Models.StockModel

@{
    ViewBag.Title = "Index";
}
<style>
    h2 {
        color: #ff6666;
        text-align: center;
    }

    #myInput {
        background-image: url('/css/searchicon.png');
        background-position: 10px 10px;
        background-repeat: no-repeat;
        width: 100%;
        font-size: 16px;
        padding: 12px 20px 12px 40px;
        border: 1px solid #ddd;
        margin-bottom: 12px;
    }

    #myTable th, #myTable td {
        text-align: left;
        padding: 12px;
    }

    #myTable tr {
        border-bottom: 1px solid #ddd;
    }

        #myTable tr.header, #myTable tr:hover {
            background-color: #f1f1f1;
        }
</style>
<h2>Stock</h2>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-inline">
        @Html.EditorFor(model => model.StockCode, new { htmlAttributes = new { @class = "form-control" } })
        <input type="submit" value="Search" formaction=@Url.Action("Search") formmethod="post" />
    </div>
}
<p><strong style="color:red">@TempData["Message"]</strong></p>
<hr />
@using (Html.BeginForm("Index", "StockMaster", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-inline">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @if(Model.StockCode != null)
        {
        <div class="form-group">
            @Html.LabelFor(model => model.StockCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div>
                @Html.EditorFor(model => model.StockCode, new { htmlAttributes = new { @class = "form-control" ,@readonly=true} })
                @Html.ValidationMessageFor(model => model.StockCode, "", new { @class = "text-danger" })
            </div>
        </div>
        }
        <div class="form-group">
            @Html.LabelFor(model => model.StockCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div>
                @Html.EditorFor(model => model.StockCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StockCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StockDescription, htmlAttributes: new { @class = "control-label " })
            <div>
                @Html.EditorFor(model => model.StockDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StockDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cost, htmlAttributes: new { @class = "control-label " })
            <div>
                @Html.EditorFor(model => model.Cost, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cost, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SellingPrice, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.SellingPrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SellingPrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TotalPurchase_ExlVat, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.TotalPurchase_ExlVat, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TotalPurchase_ExlVat, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TotalSale_ExlVat, htmlAttributes: new { @class = "control-label col-md-2" })
            <div>
                @Html.EditorFor(model => model.TotalSale_ExlVat, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TotalSale_ExlVat, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.QtyPurchase, htmlAttributes: new { @class = "control-label " })
            <div>
                @Html.EditorFor(model => model.QtyPurchase, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.QtyPurchase, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.QtySold, htmlAttributes: new { @class = "control-label " })
            <div>
                @Html.EditorFor(model => model.QtySold, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.QtySold, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StockOnHand, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.StockOnHand, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StockOnHand, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <br />
    <br />
    <div class="form-inline">
        <input type="submit" value="Create" class="btn btn-default" formaction=@Url.Action("AddStock") formmethod="post" />
        <input type="submit" value="Update" class="btn btn-default" formaction=@Url.Action("EditStock") formmethod="post" />
    </div>

}
<br />
<input type="text" id="myInput" onkeyup="myFunction()" placeholder="Filter by Code" title="Type in a Code" class="col-md-offset-9">
<table id="myTable">
    <tr class="header">
        <th>
            StockCode
        </th>
        <th>
            Description
        </th>
        <th>
            Cost
        </th>
        <th>
            Selling Price
        </th>
        <th>
            Total-Purchase_Vat-Exlcuded
        </th>
        <th>
            Total-Sale_Vat-Excluded
        </th>
        <th>
            Quantity Purchase
        </th>
        <th>
            Quantity Sold
        </th>
        <th>
            Stock-On-Hand
        </th>
    </tr>

    @foreach (var item in Model.StockList)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.StockCode)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.StockDescription)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Cost)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Selling_Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TotalPurchase_excl_Vat)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TotalSales_excl_Vat)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.QTY_Purchased)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.QTY_Sold)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StockOnHand)
            </td>
        </tr>

    }
</table>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        function myFunction() {
            var input, filter, table, tr, td, i, txtValue;
            input = document.getElementById("myInput");
            filter = input.value.toUpperCase();
            table = document.getElementById("myTable");
            tr = table.getElementsByTagName("tr");
            for (i = 0; i < tr.length; i++) {
                td = tr[i].getElementsByTagName("td")[0];
                if (td) {
                    txtValue = td.textContent || td.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        tr[i].style.display = "";
                    } else {
                        tr[i].style.display = "none";
                    }
                }
            }
        }
    </script>
}
